"use strict";
var chai_1 = require('chai');
var Rx = require('../../dist/cjs/Rx');
var Observable = Rx.Observable;
/** @test {shareResults} */
describe.only('Observable.prototype.shareResults', function () {
    it('should exist', function () {
        chai_1.expect(Observable.prototype.shareResults).to.be.a('function');
    });
    it('should share results after completion of the observable', function () {
        var s = hot('---^---a--b--c--|');
        var sSubs = '^            !';
        var t = '------------------|';
        var exp1 = '----a--b--c--|';
        var exp2 = '                  (abc|)';
        var source = s.shareResults();
        // first subscription starts the observable
        expectObservable(source).toBe(exp1);
        rxTestScheduler.schedule(function () {
            // second subscription
            expectObservable(source).toBe(exp2);
            expectSubscriptions(s.subscriptions).toBe(sSubs);
        }, time(t));
    });
    it('should be retryable after an error', function () {
        var s = cold('----a--b--c--#');
        var sSubs1 = '^            !';
        var sSubs2 = '                  ^            !';
        var t = '------------------|';
        var exp1 = '----a--b--c--#';
        var exp2 = '                  ----a--b--c--#';
        var source = s.shareResults();
        // first subscription starts the observable
        expectObservable(source).toBe(exp1);
        rxTestScheduler.schedule(function () {
            // second subscription
            expectObservable(source).toBe(exp2);
            expectSubscriptions(s.subscriptions).toBe([sSubs1, sSubs2]);
        }, time(t));
    });
    it('should handle error observables properly', function () {
        var s = cold('#');
        var sSubs1 = '(^!)';
        var sSubs2 = '                  (^!)';
        var t = '------------------|';
        var exp1 = '#';
        var exp2 = '                  #';
        var source = s.shareResults();
        // first subscription starts the observable
        expectObservable(source).toBe(exp1);
        rxTestScheduler.schedule(function () {
            // second subscription
            expectObservable(source).toBe(exp2);
            expectSubscriptions(s.subscriptions).toBe([sSubs1, sSubs2]);
        }, time(t));
    });
    it('should multicast with a replay-like functionality', function () {
        var s = hot('---^---a-----b-----c--|');
        var sSubs = '^                  !';
        var t1 = '-----------|';
        var t2 = '---------------------|';
        var exp1 = '----a-----b-----c--|';
        var exp2 = '           (ab)-c--|';
        var exp3 = '                     (abc|)';
        var source = s.shareResults();
        // first subscription starts the observable
        expectObservable(source).toBe(exp1);
        rxTestScheduler.schedule(function () {
            expectObservable(source).toBe(exp2);
        }, time(t1));
        rxTestScheduler.schedule(function () {
            // second subscription
            expectObservable(source).toBe(exp3);
            expectSubscriptions(s.subscriptions).toBe(sSubs);
        }, time(t2));
    });
    it('should multicast with a replay-like functionality ' +
        'until it errors then it should be replayable', function () {
        var s = cold('---a-----b------c--#');
        var sSubs1 = '^                  !';
        var t1 = '-----------|';
        var t2 = '---------------------|';
        var exp1 = '---a-----b------c--#';
        var exp2 = '           (ab)-c--#';
        var exp3 = '                     ---a-----b------c--#';
        var sSubs2 = '                     ^                  !';
        var source = s.shareResults();
        // first subscription starts the observable
        expectObservable(source).toBe(exp1);
        rxTestScheduler.schedule(function () {
            expectObservable(source).toBe(exp2);
        }, time(t1));
        rxTestScheduler.schedule(function () {
            // second subscription
            expectObservable(source).toBe(exp3);
            expectSubscriptions(s.subscriptions).toBe([sSubs1, sSubs2]);
        }, time(t2));
    });
    it('should handle empty observables properly', function () {
        var s = cold('|');
        var sSubs1 = '(^!)';
        var t = '------------------|';
        var exp1 = '|';
        var exp2 = '                  |';
        var source = s.shareResults();
        // first subscription starts the observable
        expectObservable(source).toBe(exp1);
        rxTestScheduler.schedule(function () {
            // second subscription
            expectObservable(source).toBe(exp2);
            expectSubscriptions(s.subscriptions).toBe(sSubs1);
        }, time(t));
    });
});
//# sourceMappingURL=shareResults-spec.js.map